<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://algorithm.yuanbin.me/en/</id>
    <title>Data Structure and Algorithm notes</title>
    <updated>2018-08-09T16:39:13Z</updated>
    <author>
        <uri>function link() { [native code] }</uri>
    </author>
    <link rel="alternate" href="https://algorithm.yuanbin.me/en/"/>
    <subtitle>Data Structure and Algorithm notes/数据结构与算法学习笔记/leetcode/lintcode 题解</subtitle>
    <generator>Feed for Node.js</generator>
    <category term="programming">
    </category>
    <category term="algorithm">
    </category>
    <category term="leetcode">
    </category>
    <entry>
        <title type="html"><![CDATA[Preface]]></title>
        <id>https://algorithm.yuanbin.me/en/</id>
        <link href="https://algorithm.yuanbin.me/en/">
        </link>
        <updated>2018-08-09T16:39:11Z</updated>
        <summary type="html"><![CDATA[<h1>Data Structure and Algorithm/leetcode/lintcode</h1>
<!-- toc -->
<ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#license">License</a></li>
<li><a href="#contribution">Contribution</a><ul>
<li><a href="#donation">Donation</a><ul>
<li><a href="#邮寄明信片">邮寄明信片</a></li>
<li><a href="#送书">送书</a></li>
<li><a href="#支付宝">支付宝</a></li>
<li><a href="#wechat">Wechat</a></li>
<li><a href="#paypal">PayPal</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#to-do">To Do</a></li>
</ul>
<!-- tocstop -->
<p><a href="https://travis-ci.org/billryan/algorithm-exercise"><img src="https://travis-ci.org/billryan/algorithm-exercise.svg?branch=master" alt="Build Status"></a>
<a href="https://slackin4ds-algo.herokuapp.com/"><img src="https://slackin4ds-algo.herokuapp.com/badge.svg" alt="Slack Status"></a>
<a href="https://ds-algo.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack"></a></p>
<ul>
<li>English via <a href="http://algorithm.yuanbin.me/en/index.html">Data Structure and Algorithm notes</a></li>
<li>简体中文请戳 <a href="http://algorithm.yuanbin.me/zh-hans/index.html">数据结构与算法/leetcode/lintcode题解</a></li>
<li>繁體中文請瀏覽 <a href="http://algorithm.yuanbin.me/zh-tw/index.html">資料結構與演算法/leetcode/lintcode題解</a></li>
</ul>
<h2>Introduction</h2>
<p>This work is some notes of learning and practicing data structures and algorithm.</p>
<ol>
<li>Part I is some brief introduction of basic data structures and algorithm, such as, linked lists, stack, queues, trees, sorting and etc.</li>
<li>Part II is the analysis and summary of programming problems, and most of the programming problems come from <a href="https://leetcode.com/">https://leetcode.com/</a>, <a href="http://www.lintcode.com/">http://www.lintcode.com/</a>, <a href="http://www.geeksforgeeks.org/">http://www.geeksforgeeks.org/</a>, <a href="http://hihocoder.com/">http://hihocoder.com/</a>, <a href="https://www.topcoder.com/">https://www.topcoder.com/</a>.</li>
<li>Part III is the appendix of resume and other supplements.</li>
</ol>
<p>This project is hosted on <a href="https://github.com/billryan/algorithm-exercise">https://github.com/billryan/algorithm-exercise</a> and rendered by <a href="https://www.gitbook.com/book/yuanbin/algorithm/details">Gitbook</a>. You can star the repository on the GitHub to keep track of updates. Another choice is to subscribe channel <code>#github_commit</code> via Slack <a href="https://ds-algo.slack.com/messages/github_commit/">https://ds-algo.slack.com/messages/github_commit/</a>. <del>RSS feed is under development.</del></p>
<p>Feel free to access <a href="http://slackin4ds-algo.herokuapp.com">http://slackin4ds-algo.herokuapp.com</a> for Slack invite automation.</p>
<p>You can view/search this document online or offline, feel free to read it. :)</p>
<ul>
<li>Online(Rendered by Gitbook): <a href="http://algorithm.yuanbin.me">http://algorithm.yuanbin.me</a></li>
<li>Offline(Compiled by Gitbook and Travis-CI):<ol>
<li>EPUB: <a href="https://github.com/sign4bill/algorithm-exercise/tree/deploy/epub">GitHub</a>, <a href="https://www.gitbook.com/download/epub/book/yuanbin/algorithm">Gitbook</a>, <a href="http://7xojrx.com1.z0.glb.clouddn.com/docs/algorithm-exercise/algorithm-ebook_en.epub">七牛 CDN(中国大陆用户适用)</a> - Recommended for iPhone/iPad/MAC</li>
<li>PDF: <a href="https://github.com/sign4bill/algorithm-exercise/tree/deploy/pdf">GitHub</a>, <a href="https://www.gitbook.com/download/pdf/book/yuanbin/algorithm">Gitbook</a>, <a href="http://7xojrx.com1.z0.glb.clouddn.com/docs/algorithm-exercise/algorithm-ebook_en.pdf">七牛 CDN(中国大陆用户适用)</a> - Recommended for Desktop</li>
<li>MOBI: <a href="https://github.com/sign4bill/algorithm-exercise/tree/deploy/mobi">GitHub</a>, <a href="https://www.gitbook.com/download/mobi/book/yuanbin/algorithm">Gitbook</a>, <a href="http://7xojrx.com1.z0.glb.clouddn.com/docs/algorithm-exercise/algorithm-ebook_en.mobi">七牛 CDN(中国大陆用户适用)</a> - Recommended for Kindle</li>
</ol>
</li>
<li>Site Search via Google: <code>keywords site:algorithm.yuanbin.me</code></li>
<li>Site Search via Swiftype: Click <code>Search this site</code> on the right bottom of webpages</li>
</ul>
<h2>License</h2>
<p>This work is licensed under the <strong>Creative Commons Attribution-ShareAlike 4.0 International License</strong>. To view a copy of this license, please visit <a href="http://creativecommons.org/licenses/by-sa/4.0/">http://creativecommons.org/licenses/by-sa/4.0/</a></p>
<h2>Contribution</h2>
<ul>
<li><a href="http://algorithm.yuanbin.me/en/index.html">English</a> is maintained by <a href="https://github.com/billryan">@billryan</a></li>
<li><a href="http://algorithm.yuanbin.zh-hans/index.html">简体中文</a> is maintained by <a href="https://github.com/billryan">@billryan</a>, <a href="https://github.com/Shaunwei">@Shaunwei</a></li>
<li><a href="http://algorithm.yuanbin.me/zh-tw/index.html">繁體中文</a> is maintained by <a href="https://github.com/CrossLuna">@CrossLuna</a></li>
</ul>
<p>Other contributors can be found in <a href="https://github.com/billryan/algorithm-exercise/graphs/contributors">Contributors to algorithm-exercise</a></p>
<h3>Donation</h3>
<p>本项目接受捐赠，形式不限，可以买书，可以寄明信片，也可以金额打赏 :)</p>
<h4>邮寄明信片</h4>
<p>@billryan 喜欢收集各种明信片，来者不拒~ 邮寄的话可以邮寄至 <code>上海市闵行区上海交通大学闵行校区电院群楼5号楼307</code>，收件人：<code>袁斌</code>。</p>
<h4>送书</h4>
<p>除了邮寄明信片，你还可以买本书送给各位贡献者，@billryan 的地址见上节。</p>
<h4>支付宝</h4>
<p><img src="../shared-files/images/alipay_billryan_qr15x15.jpg" alt="支付宝打赏"></p>
<p>账户名：yuanbin2014(at)gmail.com 金额随意</p>
<h4>Wechat</h4>
<p><img src="../shared-files/images/wechat_billryan_qr15x15.jpg" alt="Red Packet"></p>
<p>金额随意</p>
<h4>PayPal</h4>
<p>账户名：yuanbin2014(at)gmail.com 金额随意，付款时选择 friends and family</p>
<p>隐私考虑，以下名单隐去了部分个人信息，有些名单若没来得及添加，可私下联系我加上，有些信息和金额因为时间久远可能有误，欢迎指正。</p>
<ul>
<li><code>taoli***@gmail.com</code>, 20</li>
<li><code>张亚*</code>, 6.66</li>
<li><code>wen***@126.com</code>, 20.16</li>
<li><code>she***@163.com</code>, 10</li>
<li><code>孙*</code>, 20</li>
<li><code>石*</code>, 50</li>
<li><code>文*</code>, 20</li>
<li><code>don***@163.com</code>, 5</li>
<li><code>129***@qq.com</code>, 50</li>
<li><code>130****9675</code>, 5</li>
<li><code>Tong W***</code>, 20 $</li>
<li><code>ee.***@gmail.com</code>, 6.66</li>
</ul>
<p>所得捐款用于七牛 CDN 流量付费/激励 Contributors 写出更好的内容/购买书籍/西瓜/饮料</p>
<h2>To Do</h2>
<ul>
<li>[ ] add multiple languages support, currently 繁體中文, 简体中文 are available</li>
<li>[x] explore nice writing style</li>
<li>[x] add implementations of <code>Python</code>, <code>C++</code>, <code>Java</code> code</li>
<li>[x] add time and space complexity analysis</li>
<li>[x] summary of basic data structure and algorithm</li>
<li>[x] add CSS for online website <a href="http://algorithm.yuanbin.me">http://algorithm.yuanbin.me</a></li>
<li>[x] add proper Chinese fonts for PDF output</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h1>Data Structure and Algorithm/leetcode/lintcode</h1>
<!-- toc -->
<ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#license">License</a></li>
<li><a href="#contribution">Contribution</a><ul>
<li><a href="#donation">Donation</a><ul>
<li><a href="#邮寄明信片">邮寄明信片</a></li>
<li><a href="#送书">送书</a></li>
<li><a href="#支付宝">支付宝</a></li>
<li><a href="#wechat">Wechat</a></li>
<li><a href="#paypal">PayPal</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#to-do">To Do</a></li>
</ul>
<!-- tocstop -->
<p><a href="https://travis-ci.org/billryan/algorithm-exercise"><img src="https://travis-ci.org/billryan/algorithm-exercise.svg?branch=master" alt="Build Status"></a>
<a href="https://slackin4ds-algo.herokuapp.com/"><img src="https://slackin4ds-algo.herokuapp.com/badge.svg" alt="Slack Status"></a>
<a href="https://ds-algo.slack.com/"><img src="https://img.shields.io/badge/chat-on_slack-orange.svg" alt="Chat on Slack"></a></p>
<ul>
<li>English via <a href="http://algorithm.yuanbin.me/en/index.html">Data Structure and Algorithm notes</a></li>
<li>简体中文请戳 <a href="http://algorithm.yuanbin.me/zh-hans/index.html">数据结构与算法/leetcode/lintcode题解</a></li>
<li>繁體中文請瀏覽 <a href="http://algorithm.yuanbin.me/zh-tw/index.html">資料結構與演算法/leetcode/lintcode題解</a></li>
</ul>
<h2>Introduction</h2>
<p>This work is some notes of learning and practicing data structures and algorithm.</p>
<ol>
<li>Part I is some brief introduction of basic data structures and algorithm, such as, linked lists, stack, queues, trees, sorting and etc.</li>
<li>Part II is the analysis and summary of programming problems, and most of the programming problems come from <a href="https://leetcode.com/">https://leetcode.com/</a>, <a href="http://www.lintcode.com/">http://www.lintcode.com/</a>, <a href="http://www.geeksforgeeks.org/">http://www.geeksforgeeks.org/</a>, <a href="http://hihocoder.com/">http://hihocoder.com/</a>, <a href="https://www.topcoder.com/">https://www.topcoder.com/</a>.</li>
<li>Part III is the appendix of resume and other supplements.</li>
</ol>
<p>This project is hosted on <a href="https://github.com/billryan/algorithm-exercise">https://github.com/billryan/algorithm-exercise</a> and rendered by <a href="https://www.gitbook.com/book/yuanbin/algorithm/details">Gitbook</a>. You can star the repository on the GitHub to keep track of updates. Another choice is to subscribe channel <code>#github_commit</code> via Slack <a href="https://ds-algo.slack.com/messages/github_commit/">https://ds-algo.slack.com/messages/github_commit/</a>. <del>RSS feed is under development.</del></p>
<p>Feel free to access <a href="http://slackin4ds-algo.herokuapp.com">http://slackin4ds-algo.herokuapp.com</a> for Slack invite automation.</p>
<p>You can view/search this document online or offline, feel free to read it. :)</p>
<ul>
<li>Online(Rendered by Gitbook): <a href="http://algorithm.yuanbin.me">http://algorithm.yuanbin.me</a></li>
<li>Offline(Compiled by Gitbook and Travis-CI):<ol>
<li>EPUB: <a href="https://github.com/sign4bill/algorithm-exercise/tree/deploy/epub">GitHub</a>, <a href="https://www.gitbook.com/download/epub/book/yuanbin/algorithm">Gitbook</a>, <a href="http://7xojrx.com1.z0.glb.clouddn.com/docs/algorithm-exercise/algorithm-ebook_en.epub">七牛 CDN(中国大陆用户适用)</a> - Recommended for iPhone/iPad/MAC</li>
<li>PDF: <a href="https://github.com/sign4bill/algorithm-exercise/tree/deploy/pdf">GitHub</a>, <a href="https://www.gitbook.com/download/pdf/book/yuanbin/algorithm">Gitbook</a>, <a href="http://7xojrx.com1.z0.glb.clouddn.com/docs/algorithm-exercise/algorithm-ebook_en.pdf">七牛 CDN(中国大陆用户适用)</a> - Recommended for Desktop</li>
<li>MOBI: <a href="https://github.com/sign4bill/algorithm-exercise/tree/deploy/mobi">GitHub</a>, <a href="https://www.gitbook.com/download/mobi/book/yuanbin/algorithm">Gitbook</a>, <a href="http://7xojrx.com1.z0.glb.clouddn.com/docs/algorithm-exercise/algorithm-ebook_en.mobi">七牛 CDN(中国大陆用户适用)</a> - Recommended for Kindle</li>
</ol>
</li>
<li>Site Search via Google: <code>keywords site:algorithm.yuanbin.me</code></li>
<li>Site Search via Swiftype: Click <code>Search this site</code> on the right bottom of webpages</li>
</ul>
<h2>License</h2>
<p>This work is licensed under the <strong>Creative Commons Attribution-ShareAlike 4.0 International License</strong>. To view a copy of this license, please visit <a href="http://creativecommons.org/licenses/by-sa/4.0/">http://creativecommons.org/licenses/by-sa/4.0/</a></p>
<h2>Contribution</h2>
<ul>
<li><a href="http://algorithm.yuanbin.me/en/index.html">English</a> is maintained by <a href="https://github.com/billryan">@billryan</a></li>
<li><a href="http://algorithm.yuanbin.zh-hans/index.html">简体中文</a> is maintained by <a href="https://github.com/billryan">@billryan</a>, <a href="https://github.com/Shaunwei">@Shaunwei</a></li>
<li><a href="http://algorithm.yuanbin.me/zh-tw/index.html">繁體中文</a> is maintained by <a href="https://github.com/CrossLuna">@CrossLuna</a></li>
</ul>
<p>Other contributors can be found in <a href="https://github.com/billryan/algorithm-exercise/graphs/contributors">Contributors to algorithm-exercise</a></p>
<h3>Donation</h3>
<p>本项目接受捐赠，形式不限，可以买书，可以寄明信片，也可以金额打赏 :)</p>
<h4>邮寄明信片</h4>
<p>@billryan 喜欢收集各种明信片，来者不拒~ 邮寄的话可以邮寄至 <code>上海市闵行区上海交通大学闵行校区电院群楼5号楼307</code>，收件人：<code>袁斌</code>。</p>
<h4>送书</h4>
<p>除了邮寄明信片，你还可以买本书送给各位贡献者，@billryan 的地址见上节。</p>
<h4>支付宝</h4>
<p><img src="../shared-files/images/alipay_billryan_qr15x15.jpg" alt="支付宝打赏"></p>
<p>账户名：yuanbin2014(at)gmail.com 金额随意</p>
<h4>Wechat</h4>
<p><img src="../shared-files/images/wechat_billryan_qr15x15.jpg" alt="Red Packet"></p>
<p>金额随意</p>
<h4>PayPal</h4>
<p>账户名：yuanbin2014(at)gmail.com 金额随意，付款时选择 friends and family</p>
<p>隐私考虑，以下名单隐去了部分个人信息，有些名单若没来得及添加，可私下联系我加上，有些信息和金额因为时间久远可能有误，欢迎指正。</p>
<ul>
<li><code>taoli***@gmail.com</code>, 20</li>
<li><code>张亚*</code>, 6.66</li>
<li><code>wen***@126.com</code>, 20.16</li>
<li><code>she***@163.com</code>, 10</li>
<li><code>孙*</code>, 20</li>
<li><code>石*</code>, 50</li>
<li><code>文*</code>, 20</li>
<li><code>don***@163.com</code>, 5</li>
<li><code>129***@qq.com</code>, 50</li>
<li><code>130****9675</code>, 5</li>
<li><code>Tong W***</code>, 20 $</li>
<li><code>ee.***@gmail.com</code>, 6.66</li>
</ul>
<p>所得捐款用于七牛 CDN 流量付费/激励 Contributors 写出更好的内容/购买书籍/西瓜/饮料</p>
<h2>To Do</h2>
<ul>
<li>[ ] add multiple languages support, currently 繁體中文, 简体中文 are available</li>
<li>[x] explore nice writing style</li>
<li>[x] add implementations of <code>Python</code>, <code>C++</code>, <code>Java</code> code</li>
<li>[x] add time and space complexity analysis</li>
<li>[x] summary of basic data structure and algorithm</li>
<li>[x] add CSS for online website <a href="http://algorithm.yuanbin.me">http://algorithm.yuanbin.me</a></li>
<li>[x] add proper Chinese fonts for PDF output</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[FAQ]]></title>
        <id>https://algorithm.yuanbin.me/en/faq/</id>
        <link href="https://algorithm.yuanbin.me/en/faq/">
        </link>
        <updated>2018-08-09T16:39:12Z</updated>
        <summary type="html"><![CDATA[<h1>FAQ - Frequently Asked Question</h1>
<p>Some guidelines for contributing and other questions are listed here.</p>
<h2>How to Contribute?</h2>
<ul>
<li>Access <a href="http://algorithm.yuanbin.me/en/faq/guidelines_for_contributing.html">Guidelines for Contributing</a> for details.</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h1>FAQ - Frequently Asked Question</h1>
<p>Some guidelines for contributing and other questions are listed here.</p>
<h2>How to Contribute?</h2>
<ul>
<li>Access <a href="http://algorithm.yuanbin.me/en/faq/guidelines_for_contributing.html">Guidelines for Contributing</a> for details.</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Guidelines for Contributing]]></title>
        <id>https://algorithm.yuanbin.me/en/faq/guidelines_for_contributing.html</id>
        <link href="https://algorithm.yuanbin.me/en/faq/guidelines_for_contributing.html">
        </link>
        <updated>2018-08-09T16:39:12Z</updated>
        <summary type="html"><![CDATA[<h1>Guidelines for Contributing</h1>
<ul>
<li>Access English via <a href="http://algorithm.yuanbin.me/en/faq/guidelines_for_contributing.html">Guidelines for Contributing</a></li>
<li>繁體中文請移步 <a href="http://algorithm.yuanbin.me/zh-tw/faq/guidelines_for_contributing.html">貢獻指南</a></li>
<li>简体中文请移步 <a href="http://algorithm.yuanbin.zh-hans/faq/guidelines_for_contributing.html">贡献指南</a></li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h1>Guidelines for Contributing</h1>
<ul>
<li>Access English via <a href="http://algorithm.yuanbin.me/en/faq/guidelines_for_contributing.html">Guidelines for Contributing</a></li>
<li>繁體中文請移步 <a href="http://algorithm.yuanbin.me/zh-tw/faq/guidelines_for_contributing.html">貢獻指南</a></li>
<li>简体中文请移步 <a href="http://algorithm.yuanbin.zh-hans/faq/guidelines_for_contributing.html">贡献指南</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Part I - Basics]]></title>
        <id>https://algorithm.yuanbin.me/en/part_i_basics/</id>
        <link href="https://algorithm.yuanbin.me/en/part_i_basics/">
        </link>
        <updated>2018-08-09T16:39:12Z</updated>
        <summary type="html"><![CDATA[<h1>Part I - Basics</h1>
<p>The first part summarizes some of the main aspects of data structures and
algorithms, such as implementation and usage.</p>
<p>This chapter consists of the following sections.</p>
<h2>Reference</h2>
<ul>
<li><a href="http://visualgo.net/">VisuAlgo</a> - Animated visualizations of data structures and algorithms</li>
<li><a href="http://www.cs.usfca.edu/~galles/visualization/Algorithms.html">Data Structure Visualizations</a> - An alternative to VisuAlgo</li>
<li><a href="https://www.toptal.com/developers/sorting-algorithms/">Sorting Algorithms</a> - Animations comparing various sorting algorithms</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h1>Part I - Basics</h1>
<p>The first part summarizes some of the main aspects of data structures and
algorithms, such as implementation and usage.</p>
<p>This chapter consists of the following sections.</p>
<h2>Reference</h2>
<ul>
<li><a href="http://visualgo.net/">VisuAlgo</a> - Animated visualizations of data structures and algorithms</li>
<li><a href="http://www.cs.usfca.edu/~galles/visualization/Algorithms.html">Data Structure Visualizations</a> - An alternative to VisuAlgo</li>
<li><a href="https://www.toptal.com/developers/sorting-algorithms/">Sorting Algorithms</a> - Animations comparing various sorting algorithms</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Basics Data Structure]]></title>
        <id>https://algorithm.yuanbin.me/en/basics_data_structure/</id>
        <link href="https://algorithm.yuanbin.me/en/basics_data_structure/">
        </link>
        <updated>2018-08-09T16:39:12Z</updated>
        <summary type="html"><![CDATA[<h1>Data Structure</h1>
<p>This chapter describes the fundamental data structures and their implementations.</p>
]]></summary>
        <content type="html"><![CDATA[<h1>Data Structure</h1>
<p>This chapter describes the fundamental data structures and their implementations.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[String]]></title>
        <id>https://algorithm.yuanbin.me/en/basics_data_structure/string.html</id>
        <link href="https://algorithm.yuanbin.me/en/basics_data_structure/string.html">
        </link>
        <updated>2018-08-09T16:39:12Z</updated>
        <summary type="html"><![CDATA[<h1>String</h1>
<p>String-related problems often appear in interview questions. In actual
development, strings are also frequently used. Summarized here are common uses
of strings in C++, Java, and Python.</p>
<h2>Python</h2>
<pre><code class="lang-python">s1 = str()
# in python, `&#39;&#39;` and `&quot;&quot;` are the same
s2 = &quot;shaunwei&quot; # &#39;shaunwei&#39;
s2len = len(s2)
# last 3 chars
s2[-3:] # wei
s2[5:8] # wei
s3 = s2[:5] # shaun
s3 += &#39;wei&#39; # return &#39;shaunwei&#39;
# list in python is same as ArrayList in java
s2list = list(s3)
# string at index 4
s2[4] # &#39;n&#39;
# find index at first
s2.index(&#39;w&#39;)  # return 5, if not found, throw ValueError
s2.find(&#39;w&#39;) # return 5, if not found, return -1
</code></pre>
<p>In Python, there&#39;s no StringBuffer or StringBuilder. However, string manipulations
are fairly efficient already.</p>
<h2>Java</h2>
<pre><code class="lang-java">String s1 = new String();
String s2 = &quot;billryan&quot;;
int s2Len = s2.length();
s2.substring(4, 8); // return &quot;ryan&quot;
StringBuilder s3 = new StringBuilder(s2.substring(4, 8));
s3.append(&quot;bill&quot;);
String s2New = s3.toString(); // return &quot;ryanbill&quot;
// convert String to char array
char[] s2Char = s2.toCharArray();
// char at index 4
char ch = s2.charAt(4); // return &#39;r&#39;
// find index at first
int index = s2.indexOf(&#39;r&#39;); // return 4. if not found, return -1
</code></pre>
<p>The difference between StringBuffer and StringBuilder is that the former guarantees
thread safety. In a single-threaded environment, StringBuilder is more efficient.</p>
]]></summary>
        <content type="html"><![CDATA[<h1>String</h1>
<p>String-related problems often appear in interview questions. In actual
development, strings are also frequently used. Summarized here are common uses
of strings in C++, Java, and Python.</p>
<h2>Python</h2>
<pre><code class="lang-python">s1 = str()
# in python, `&#39;&#39;` and `&quot;&quot;` are the same
s2 = &quot;shaunwei&quot; # &#39;shaunwei&#39;
s2len = len(s2)
# last 3 chars
s2[-3:] # wei
s2[5:8] # wei
s3 = s2[:5] # shaun
s3 += &#39;wei&#39; # return &#39;shaunwei&#39;
# list in python is same as ArrayList in java
s2list = list(s3)
# string at index 4
s2[4] # &#39;n&#39;
# find index at first
s2.index(&#39;w&#39;)  # return 5, if not found, throw ValueError
s2.find(&#39;w&#39;) # return 5, if not found, return -1
</code></pre>
<p>In Python, there&#39;s no StringBuffer or StringBuilder. However, string manipulations
are fairly efficient already.</p>
<h2>Java</h2>
<pre><code class="lang-java">String s1 = new String();
String s2 = &quot;billryan&quot;;
int s2Len = s2.length();
s2.substring(4, 8); // return &quot;ryan&quot;
StringBuilder s3 = new StringBuilder(s2.substring(4, 8));
s3.append(&quot;bill&quot;);
String s2New = s3.toString(); // return &quot;ryanbill&quot;
// convert String to char array
char[] s2Char = s2.toCharArray();
// char at index 4
char ch = s2.charAt(4); // return &#39;r&#39;
// find index at first
int index = s2.indexOf(&#39;r&#39;); // return 4. if not found, return -1
</code></pre>
<p>The difference between StringBuffer and StringBuilder is that the former guarantees
thread safety. In a single-threaded environment, StringBuilder is more efficient.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[String]]></title>
        <id>https://algorithm.yuanbin.me/en/string/</id>
        <link href="https://algorithm.yuanbin.me/en/string/">
        </link>
        <updated>2018-08-09T16:39:12Z</updated>
        <summary type="html"><![CDATA[<h1>String</h1>
<p>String related topics are discussed in this chapter.</p>
<blockquote>
<p><strong>Note</strong>
In order to re-use most of the memory of an existing data structure, internal implementation of string is immutable in most programming languages(Java, Python). Take care if you want to modify character in place. </p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h1>String</h1>
<p>String related topics are discussed in this chapter.</p>
<blockquote>
<p><strong>Note</strong>
In order to re-use most of the memory of an existing data structure, internal implementation of string is immutable in most programming languages(Java, Python). Take care if you want to modify character in place. </p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[strStr]]></title>
        <id>https://algorithm.yuanbin.me/en/string/strstr.html</id>
        <link href="https://algorithm.yuanbin.me/en/string/strstr.html">
        </link>
        <updated>2018-08-09T16:39:12Z</updated>
        <summary type="html"><![CDATA[<h1>strStr</h1>
<!-- toc -->
<ul>
<li><a href="#question">Question</a><ul>
<li><a href="#problem-statement">Problem Statement</a><ul>
<li><a href="#example">Example</a></li>
<li><a href="#challenge">Challenge</a></li>
<li><a href="#clarification">Clarification</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#problem-analysis">Problem Analysis</a><ul>
<li><a href="#python">Python</a></li>
<li><a href="#c">C</a></li>
<li><a href="#c">C++</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#source-code-analysis">Source Code Analysis</a></li>
<li><a href="#complexity-analysis">Complexity Analysis</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h2>Question</h2>
<ul>
<li>leetcode: <a href="https://leetcode.com/problems/implement-strstr/">Implement strStr() | LeetCode OJ</a></li>
<li>lintcode: <a href="http://www.lintcode.com/en/problem/strstr/">lintcode - (13) strstr</a></li>
</ul>
<h3>Problem Statement</h3>
<p>For a given source string and a target string, you should output the <strong>first</strong>
index(from 0) of target string in source string.</p>
<p>If target does not exist in source, just return <code>-1</code>.</p>
<h4>Example</h4>
<p>If source = <code>&quot;source&quot;</code> and target = <code>&quot;target&quot;</code>, return <code>-1</code>.</p>
<p>If source = <code>&quot;abcdabcdefg&quot;</code> and target = <code>&quot;bcd&quot;</code>, return <code>1</code>.</p>
<h4>Challenge</h4>
<p>O(n2) is acceptable. Can you implement an O(n) algorithm? (hint: <em>KMP</em>)</p>
<h4>Clarification</h4>
<p>Do I need to implement KMP Algorithm in a real interview?</p>
<ul>
<li>Not necessary. When you meet this problem in a real interview, the interviewer may just want to test your basic implementation ability. But make sure your confirm with the interviewer first.</li>
</ul>
<h2>Problem Analysis</h2>
<p>It&#39;s very straightforward to solve string match problem with nested for loops. Since we must iterate the target string, we can optimize the iteration of source string. It&#39;s unnecessary to iterate the source string if the length of remaining part does not exceed the length of target string. We can only iterate the valid part of source string. Apart from this naive algorithm, you can use a more effective algorithm such as KMP.</p>
<h3>Python</h3>
<pre><code class="lang-python">class Solution:
    def strStr(self, source, target):
        if source is None or target is None:
            return -1

        for i in range(len(source) - len(target) + 1):
            for j in range(len(target)):
                if source[i + j] != target[j]:
                    break
            else:  # no break
                return i
        return -1
</code></pre>
<h3>C</h3>
<pre><code class="lang-c">int strStr(char* haystack, char* needle) {
    if (haystack == NULL || needle == NULL) return -1;

    const int len_h = strlen(haystack);
    const int len_n = strlen(needle);
    for (int i = 0; i &lt; len_h - len_n + 1; i++) {
        int j = 0;
        for (; j &lt; len_n; j++) {
            if (haystack[i+j] != needle[j]) {
                break;
            }
        }
        if (j == len_n) return i;
    }

    return -1;
}
</code></pre>
<h3>C++</h3>
<pre><code class="lang-c++">class Solution {
public:
    int strStr(string haystack, string needle) {
        if (haystack.empty() &amp;&amp; needle.empty()) return 0;
        if (haystack.empty()) return -1;
        if (needle.empty()) return 0;
        // in case of overflow for negative
        if (haystack.size() &lt; needle.size()) return -1;

        for (int i = 0; i &lt; haystack.size() - needle.size() + 1; i++) {
            string::size_type j = 0;
            for (; j &lt; needle.size(); j++) {
                if (haystack[i + j] != needle[j]) break;
            }
            if (j == needle.size()) return i;
        }

        return -1;
    }
};
</code></pre>
<h3>Java</h3>
<pre><code class="lang-java">public class Solution {
    public int strStr(String haystack, String needle) {
        if (haystack == null &amp;&amp; needle == null) return 0;
        if (haystack == null) return -1;
        if (needle == null) return 0;

        for (int i = 0; i &lt; haystack.length() - needle.length() + 1; i++) {
            int j = 0;
            for (; j &lt; needle.length(); j++) {
                if (haystack.charAt(i+j) != needle.charAt(j)) break;
            }
            if (j == needle.length()) return i;
        }

        return -1;
    }
}
</code></pre>
<h3>Source Code Analysis</h3>
<ol>
<li>corner case: <code>haystack(source)</code> and <code>needle(target)</code> may be empty string.</li>
<li>code convention:<ul>
<li>space is needed for <code>==</code></li>
<li>use meaningful variable names</li>
<li>put a blank line before declaration <code>int i, j;</code></li>
</ul>
</li>
<li>declare j outside for loop if and only if you want to use it outside.</li>
</ol>
<p>Some Pythonic notes: <a href="https://docs.python.org/3/tutorial/controlflow.html">4. More Control Flow Tools</a> section 4.4 and <a href="http://stackoverflow.com/questions/9979970/why-does-python-use-else-after-for-and-while-loops">if statement - Why does python use &#39;else&#39; after for and while loops?</a></p>
<h3>Complexity Analysis</h3>
<p>nested for loop, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mo>(</mo><mi>n</mi><mo>−</mo><mi>m</mi><mo>)</mo><mi>m</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O((n-m)m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathit">m</span><span class="mclose">)</span><span class="mord mathit">m</span><span class="mclose">)</span></span></span></span> for worst case.</p>
]]></summary>
        <content type="html"><![CDATA[<h1>strStr</h1>
<!-- toc -->
<ul>
<li><a href="#question">Question</a><ul>
<li><a href="#problem-statement">Problem Statement</a><ul>
<li><a href="#example">Example</a></li>
<li><a href="#challenge">Challenge</a></li>
<li><a href="#clarification">Clarification</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#problem-analysis">Problem Analysis</a><ul>
<li><a href="#python">Python</a></li>
<li><a href="#c">C</a></li>
<li><a href="#c">C++</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#source-code-analysis">Source Code Analysis</a></li>
<li><a href="#complexity-analysis">Complexity Analysis</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h2>Question</h2>
<ul>
<li>leetcode: <a href="https://leetcode.com/problems/implement-strstr/">Implement strStr() | LeetCode OJ</a></li>
<li>lintcode: <a href="http://www.lintcode.com/en/problem/strstr/">lintcode - (13) strstr</a></li>
</ul>
<h3>Problem Statement</h3>
<p>For a given source string and a target string, you should output the <strong>first</strong>
index(from 0) of target string in source string.</p>
<p>If target does not exist in source, just return <code>-1</code>.</p>
<h4>Example</h4>
<p>If source = <code>&quot;source&quot;</code> and target = <code>&quot;target&quot;</code>, return <code>-1</code>.</p>
<p>If source = <code>&quot;abcdabcdefg&quot;</code> and target = <code>&quot;bcd&quot;</code>, return <code>1</code>.</p>
<h4>Challenge</h4>
<p>O(n2) is acceptable. Can you implement an O(n) algorithm? (hint: <em>KMP</em>)</p>
<h4>Clarification</h4>
<p>Do I need to implement KMP Algorithm in a real interview?</p>
<ul>
<li>Not necessary. When you meet this problem in a real interview, the interviewer may just want to test your basic implementation ability. But make sure your confirm with the interviewer first.</li>
</ul>
<h2>Problem Analysis</h2>
<p>It&#39;s very straightforward to solve string match problem with nested for loops. Since we must iterate the target string, we can optimize the iteration of source string. It&#39;s unnecessary to iterate the source string if the length of remaining part does not exceed the length of target string. We can only iterate the valid part of source string. Apart from this naive algorithm, you can use a more effective algorithm such as KMP.</p>
<h3>Python</h3>
<pre><code class="lang-python">class Solution:
    def strStr(self, source, target):
        if source is None or target is None:
            return -1

        for i in range(len(source) - len(target) + 1):
            for j in range(len(target)):
                if source[i + j] != target[j]:
                    break
            else:  # no break
                return i
        return -1
</code></pre>
<h3>C</h3>
<pre><code class="lang-c">int strStr(char* haystack, char* needle) {
    if (haystack == NULL || needle == NULL) return -1;

    const int len_h = strlen(haystack);
    const int len_n = strlen(needle);
    for (int i = 0; i &lt; len_h - len_n + 1; i++) {
        int j = 0;
        for (; j &lt; len_n; j++) {
            if (haystack[i+j] != needle[j]) {
                break;
            }
        }
        if (j == len_n) return i;
    }

    return -1;
}
</code></pre>
<h3>C++</h3>
<pre><code class="lang-c++">class Solution {
public:
    int strStr(string haystack, string needle) {
        if (haystack.empty() &amp;&amp; needle.empty()) return 0;
        if (haystack.empty()) return -1;
        if (needle.empty()) return 0;
        // in case of overflow for negative
        if (haystack.size() &lt; needle.size()) return -1;

        for (int i = 0; i &lt; haystack.size() - needle.size() + 1; i++) {
            string::size_type j = 0;
            for (; j &lt; needle.size(); j++) {
                if (haystack[i + j] != needle[j]) break;
            }
            if (j == needle.size()) return i;
        }

        return -1;
    }
};
</code></pre>
<h3>Java</h3>
<pre><code class="lang-java">public class Solution {
    public int strStr(String haystack, String needle) {
        if (haystack == null &amp;&amp; needle == null) return 0;
        if (haystack == null) return -1;
        if (needle == null) return 0;

        for (int i = 0; i &lt; haystack.length() - needle.length() + 1; i++) {
            int j = 0;
            for (; j &lt; needle.length(); j++) {
                if (haystack.charAt(i+j) != needle.charAt(j)) break;
            }
            if (j == needle.length()) return i;
        }

        return -1;
    }
}
</code></pre>
<h3>Source Code Analysis</h3>
<ol>
<li>corner case: <code>haystack(source)</code> and <code>needle(target)</code> may be empty string.</li>
<li>code convention:<ul>
<li>space is needed for <code>==</code></li>
<li>use meaningful variable names</li>
<li>put a blank line before declaration <code>int i, j;</code></li>
</ul>
</li>
<li>declare j outside for loop if and only if you want to use it outside.</li>
</ol>
<p>Some Pythonic notes: <a href="https://docs.python.org/3/tutorial/controlflow.html">4. More Control Flow Tools</a> section 4.4 and <a href="http://stackoverflow.com/questions/9979970/why-does-python-use-else-after-for-and-while-loops">if statement - Why does python use &#39;else&#39; after for and while loops?</a></p>
<h3>Complexity Analysis</h3>
<p>nested for loop, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mo>(</mo><mi>n</mi><mo>−</mo><mi>m</mi><mo>)</mo><mi>m</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O((n-m)m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathit">m</span><span class="mclose">)</span><span class="mord mathit">m</span><span class="mclose">)</span></span></span></span> for worst case.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linked List]]></title>
        <id>https://algorithm.yuanbin.me/en/linked_list/</id>
        <link href="https://algorithm.yuanbin.me/en/linked_list/">
        </link>
        <updated>2018-08-09T16:39:13Z</updated>
        <summary type="html"><![CDATA[<h1>Linked List</h1>
<p>This section includes common operations on linked list, such as deletion, insertion, and merging.</p>
<p>Frequently made mistakes:</p>
<ul>
<li>Not updating runner-node when traversing linked list</li>
<li>Not recording head node before traversing</li>
<li>returning incorrect pointer to node</li>
</ul>
<p>The image below serves as a summarization.</p>
<p><img src="../../shared-files/images/linked_list_summary_en.png" alt="Linked List"></p>
]]></summary>
        <content type="html"><![CDATA[<h1>Linked List</h1>
<p>This section includes common operations on linked list, such as deletion, insertion, and merging.</p>
<p>Frequently made mistakes:</p>
<ul>
<li>Not updating runner-node when traversing linked list</li>
<li>Not recording head node before traversing</li>
<li>returning incorrect pointer to node</li>
</ul>
<p>The image below serves as a summarization.</p>
<p><img src="../../shared-files/images/linked_list_summary_en.png" alt="Linked List"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reverse Linked List]]></title>
        <id>https://algorithm.yuanbin.me/en/linked_list/reverse_linked_list.html</id>
        <link href="https://algorithm.yuanbin.me/en/linked_list/reverse_linked_list.html">
        </link>
        <updated>2018-08-09T16:39:13Z</updated>
        <summary type="html"><![CDATA[<h1>Reverse Linked List</h1>
<!-- toc -->
<ul>
<li><a href="#question">Question</a></li>
<li><a href="#solution1---non-recursively">Solution1 - Non-recursively</a><ul>
<li><a href="#python">Python</a></li>
<li><a href="#c">C++</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#source-code-analysis">Source Code Analysis</a></li>
<li><a href="#complexity">Complexity</a></li>
</ul>
</li>
<li><a href="#solution2---recursively">Solution2 - Recursively</a><ul>
<li><a href="#python-1">Python</a></li>
<li><a href="#c-1">C++</a></li>
<li><a href="#java-1">Java</a></li>
<li><a href="#source-code-analysis-1">Source Code Analysis</a></li>
<li><a href="#complexity-1">Complexity</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h2>Question</h2>
<ul>
<li>leetcode: <a href="https://leetcode.com/problems/reverse-linked-list/">(206) Reverse Linked List | LeetCode OJ</a></li>
<li>lintcode: <a href="http://www.lintcode.com/en/problem/reverse-linked-list/">(35) Reverse Linked List</a></li>
</ul>
<pre><code>Reverse a linked list.

Example
For linked list 1-&gt;2-&gt;3, the reversed linked list is 3-&gt;2-&gt;1

Challenge
Reverse it in-place and in one-pass
</code></pre><h2>Solution1 - Non-recursively</h2>
<p>It would be much easier to reverse an array than a linked list, since array supports random access with index, while singly linked list can ONLY be operated through its head node. So an approach without index is required.</p>
<p>Think about how &#39;1-&gt;2-&gt;3&#39; can become &#39;3-&gt;2-&gt;1&#39;. Starting from &#39;1&#39;, we should turn &#39;1-&gt;2&#39; into &#39;2-&gt;1&#39;, then &#39;2-&gt;3&#39; into &#39;3-&gt;2&#39;, and so on. The key is how to swap two adjacent nodes.</p>
<pre><code>temp = head -&gt; next;
head-&gt;next = prev;
prev = head;
head = temp;
</code></pre><p>The above code maintains two pointer, <code>prev</code> and <code>head</code>, and keeps record of next node before swapping. More detailed analysis:</p>
<p><img src="../../shared-files/images/reverse_linked_list_i.jpg" alt="Reverse Linked List"></p>
<ol>
<li>Keep record of next node</li>
<li>change <code>head-&gt;next</code> to <code>prev</code></li>
<li>update <code>prev</code> with <code>head</code>, to keep moving forward</li>
<li>update <code>head</code> with the record in step 1, for the sake of next loop</li>
</ol>
<h3>Python</h3>
<pre><code class="lang-python"># Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # @param {ListNode} head
    # @return {ListNode}
    def reverseList(self, head):
        prev = None
        curr = head
        while curr is not None:
            temp = curr.next
            curr.next = prev
            prev = curr
            curr = temp
        # fix head
        head = prev

        return head
</code></pre>
<h3>C++</h3>
<pre><code class="lang-c++">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head) {
        ListNode *prev = NULL;
        ListNode *curr = head;
        while (curr != NULL) {
            ListNode *temp = curr-&gt;next;
            curr-&gt;next = prev;
            prev = curr;
            curr = temp;
        }
        // fix head
        head = prev;

        return head;
    }
};
</code></pre>
<h3>Java</h3>
<pre><code class="lang-java">/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        while (curr != null) {
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        // fix head
        head = prev;

        return head;
    }
}
</code></pre>
<h3>Source Code Analysis</h3>
<p>Already covered in the solution part. One more word, the assignment of <code>prev</code> is neat and skilled.</p>
<h3>Complexity</h3>
<p>Traversing the linked list leads to <strong><em>O(n)</em></strong> time complexity, and auxiliary space complexity is <strong><em>O(1)</em></strong>.</p>
<h2>Solution2 - Recursively</h2>
<p>Three cases when the recursion ceases:</p>
<ol>
<li>If given linked list is null, just return.</li>
<li>If given linked list has only one node, return that node.</li>
<li>If given linked list has at least two nodes, pick out the head node and regard the following nodes as a sub-linked-list, swap them, then recurse that sub-linked-list.</li>
</ol>
<p>Be careful when swapping the head node (refer as <code>nodeY</code>) and head of the sub-linked-list (refer as &#39;nodeX&#39; ): First, swap <code>nodeY</code> and <code>nodeX</code>; Second, assign <code>null</code> to <code>nodeY-&gt;next</code> (or it would fall into infinite loop, and tail of result list won&#39;t point to <code>null</code>).</p>
<h3>Python</h3>
<pre><code class="lang-python">&quot;&quot;&quot;
Definition of ListNode

class ListNode(object):

    def __init__(self, val, next=None):
        self.val = val
        self.next = next
&quot;&quot;&quot;
class Solution:
    &quot;&quot;&quot;
    @param head: The first node of the linked list.
    @return: You should return the head of the reversed linked list.
                  Reverse it in-place.
    &quot;&quot;&quot;
    def reverse(self, head):
        # case1: empty list
        if head is None:
            return head
        # case2: only one element list
        if head.next is None:
            return head
        # case3: reverse from the rest after head
        newHead = self.reverse(head.next)
        # reverse between head and head-&gt;next
        head.next.next = head
        # unlink list from the rest
        head.next = None

        return newHead
</code></pre>
<h3>C++</h3>
<pre><code class="lang-c++">/**
 * Definition of ListNode
 *
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *
 *     ListNode(int val) {
 *         this-&gt;val = val;
 *         this-&gt;next = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param head: The first node of linked list.
     * @return: The new head of reversed linked list.
     */
    ListNode *reverse(ListNode *head) {
        // case1: empty list
        if (head == NULL) return head;
        // case2: only one element list
        if (head-&gt;next == NULL) return head;
        // case3: reverse from the rest after head
        ListNode *newHead = reverse(head-&gt;next);
        // reverse between head and head-&gt;next
        head-&gt;next-&gt;next = head;
        // unlink list from the rest
        head-&gt;next = NULL;

        return newHead;
    }
};
</code></pre>
<h3>Java</h3>
<pre><code class="lang-java">/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverse(ListNode head) {
        // case1: empty list
        if (head == null) return head;
        // case2: only one element list
        if (head.next == null) return head;
        // case3: reverse from the rest after head
        ListNode newHead = reverse(head.next);
        // reverse between head and head-&gt;next
        head.next.next = head;
        // unlink list from the rest
        head.next = null;

        return newHead;
    }
}
</code></pre>
<h3>Source Code Analysis</h3>
<p>case1 and case2 can be combined.What case3 returns is head of reversed list, which means it is exact the same Node (tail of origin linked list) through the recursion.</p>
<h3>Complexity</h3>
<ul>
<li><a href="http://www.cnblogs.com/kubixuesheng/p/4394509.html">全面分析再动手的习惯：链表的反转问题（递归和非递归方式） - 木棉和木槿 - 博客园</a></li>
<li><a href="http://stackoverflow.com/questions/354875/reversing-a-linked-list-in-java-recursively">data structures - Reversing a linked list in Java, recursively - Stack Overflow</a></li>
<li><a href="http://ceeji.net/blog/reserve-linked-list-cpp/">反转单向链表的四种实现（递归与非递归，C++） | 宁心勉学，慎思笃行</a></li>
<li><a href="https://leetcode.com/discuss/37804/iteratively-and-recursively-java-solution">iteratively and recursively Java Solution - Leetcode Discuss</a></li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h1>Reverse Linked List</h1>
<!-- toc -->
<ul>
<li><a href="#question">Question</a></li>
<li><a href="#solution1---non-recursively">Solution1 - Non-recursively</a><ul>
<li><a href="#python">Python</a></li>
<li><a href="#c">C++</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#source-code-analysis">Source Code Analysis</a></li>
<li><a href="#complexity">Complexity</a></li>
</ul>
</li>
<li><a href="#solution2---recursively">Solution2 - Recursively</a><ul>
<li><a href="#python-1">Python</a></li>
<li><a href="#c-1">C++</a></li>
<li><a href="#java-1">Java</a></li>
<li><a href="#source-code-analysis-1">Source Code Analysis</a></li>
<li><a href="#complexity-1">Complexity</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h2>Question</h2>
<ul>
<li>leetcode: <a href="https://leetcode.com/problems/reverse-linked-list/">(206) Reverse Linked List | LeetCode OJ</a></li>
<li>lintcode: <a href="http://www.lintcode.com/en/problem/reverse-linked-list/">(35) Reverse Linked List</a></li>
</ul>
<pre><code>Reverse a linked list.

Example
For linked list 1-&gt;2-&gt;3, the reversed linked list is 3-&gt;2-&gt;1

Challenge
Reverse it in-place and in one-pass
</code></pre><h2>Solution1 - Non-recursively</h2>
<p>It would be much easier to reverse an array than a linked list, since array supports random access with index, while singly linked list can ONLY be operated through its head node. So an approach without index is required.</p>
<p>Think about how &#39;1-&gt;2-&gt;3&#39; can become &#39;3-&gt;2-&gt;1&#39;. Starting from &#39;1&#39;, we should turn &#39;1-&gt;2&#39; into &#39;2-&gt;1&#39;, then &#39;2-&gt;3&#39; into &#39;3-&gt;2&#39;, and so on. The key is how to swap two adjacent nodes.</p>
<pre><code>temp = head -&gt; next;
head-&gt;next = prev;
prev = head;
head = temp;
</code></pre><p>The above code maintains two pointer, <code>prev</code> and <code>head</code>, and keeps record of next node before swapping. More detailed analysis:</p>
<p><img src="../../shared-files/images/reverse_linked_list_i.jpg" alt="Reverse Linked List"></p>
<ol>
<li>Keep record of next node</li>
<li>change <code>head-&gt;next</code> to <code>prev</code></li>
<li>update <code>prev</code> with <code>head</code>, to keep moving forward</li>
<li>update <code>head</code> with the record in step 1, for the sake of next loop</li>
</ol>
<h3>Python</h3>
<pre><code class="lang-python"># Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # @param {ListNode} head
    # @return {ListNode}
    def reverseList(self, head):
        prev = None
        curr = head
        while curr is not None:
            temp = curr.next
            curr.next = prev
            prev = curr
            curr = temp
        # fix head
        head = prev

        return head
</code></pre>
<h3>C++</h3>
<pre><code class="lang-c++">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head) {
        ListNode *prev = NULL;
        ListNode *curr = head;
        while (curr != NULL) {
            ListNode *temp = curr-&gt;next;
            curr-&gt;next = prev;
            prev = curr;
            curr = temp;
        }
        // fix head
        head = prev;

        return head;
    }
};
</code></pre>
<h3>Java</h3>
<pre><code class="lang-java">/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        while (curr != null) {
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        // fix head
        head = prev;

        return head;
    }
}
</code></pre>
<h3>Source Code Analysis</h3>
<p>Already covered in the solution part. One more word, the assignment of <code>prev</code> is neat and skilled.</p>
<h3>Complexity</h3>
<p>Traversing the linked list leads to <strong><em>O(n)</em></strong> time complexity, and auxiliary space complexity is <strong><em>O(1)</em></strong>.</p>
<h2>Solution2 - Recursively</h2>
<p>Three cases when the recursion ceases:</p>
<ol>
<li>If given linked list is null, just return.</li>
<li>If given linked list has only one node, return that node.</li>
<li>If given linked list has at least two nodes, pick out the head node and regard the following nodes as a sub-linked-list, swap them, then recurse that sub-linked-list.</li>
</ol>
<p>Be careful when swapping the head node (refer as <code>nodeY</code>) and head of the sub-linked-list (refer as &#39;nodeX&#39; ): First, swap <code>nodeY</code> and <code>nodeX</code>; Second, assign <code>null</code> to <code>nodeY-&gt;next</code> (or it would fall into infinite loop, and tail of result list won&#39;t point to <code>null</code>).</p>
<h3>Python</h3>
<pre><code class="lang-python">&quot;&quot;&quot;
Definition of ListNode

class ListNode(object):

    def __init__(self, val, next=None):
        self.val = val
        self.next = next
&quot;&quot;&quot;
class Solution:
    &quot;&quot;&quot;
    @param head: The first node of the linked list.
    @return: You should return the head of the reversed linked list.
                  Reverse it in-place.
    &quot;&quot;&quot;
    def reverse(self, head):
        # case1: empty list
        if head is None:
            return head
        # case2: only one element list
        if head.next is None:
            return head
        # case3: reverse from the rest after head
        newHead = self.reverse(head.next)
        # reverse between head and head-&gt;next
        head.next.next = head
        # unlink list from the rest
        head.next = None

        return newHead
</code></pre>
<h3>C++</h3>
<pre><code class="lang-c++">/**
 * Definition of ListNode
 *
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *
 *     ListNode(int val) {
 *         this-&gt;val = val;
 *         this-&gt;next = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param head: The first node of linked list.
     * @return: The new head of reversed linked list.
     */
    ListNode *reverse(ListNode *head) {
        // case1: empty list
        if (head == NULL) return head;
        // case2: only one element list
        if (head-&gt;next == NULL) return head;
        // case3: reverse from the rest after head
        ListNode *newHead = reverse(head-&gt;next);
        // reverse between head and head-&gt;next
        head-&gt;next-&gt;next = head;
        // unlink list from the rest
        head-&gt;next = NULL;

        return newHead;
    }
};
</code></pre>
<h3>Java</h3>
<pre><code class="lang-java">/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverse(ListNode head) {
        // case1: empty list
        if (head == null) return head;
        // case2: only one element list
        if (head.next == null) return head;
        // case3: reverse from the rest after head
        ListNode newHead = reverse(head.next);
        // reverse between head and head-&gt;next
        head.next.next = head;
        // unlink list from the rest
        head.next = null;

        return newHead;
    }
}
</code></pre>
<h3>Source Code Analysis</h3>
<p>case1 and case2 can be combined.What case3 returns is head of reversed list, which means it is exact the same Node (tail of origin linked list) through the recursion.</p>
<h3>Complexity</h3>
<ul>
<li><a href="http://www.cnblogs.com/kubixuesheng/p/4394509.html">全面分析再动手的习惯：链表的反转问题（递归和非递归方式） - 木棉和木槿 - 博客园</a></li>
<li><a href="http://stackoverflow.com/questions/354875/reversing-a-linked-list-in-java-recursively">data structures - Reversing a linked list in Java, recursively - Stack Overflow</a></li>
<li><a href="http://ceeji.net/blog/reserve-linked-list-cpp/">反转单向链表的四种实现（递归与非递归，C++） | 宁心勉学，慎思笃行</a></li>
<li><a href="https://leetcode.com/discuss/37804/iteratively-and-recursively-java-solution">iteratively and recursively Java Solution - Leetcode Discuss</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tags]]></title>
        <id>https://algorithm.yuanbin.me/en/tags.html</id>
        <link href="https://algorithm.yuanbin.me/en/tags.html">
        </link>
        <updated>2018-08-09T16:39:13Z</updated>
        <summary type="html"><![CDATA[<h1>Tags</h1>
]]></summary>
        <content type="html"><![CDATA[<h1>Tags</h1>
]]></content>
    </entry>
</feed>